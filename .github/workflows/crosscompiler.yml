# Cross-compile workflow that is manually triggered

name: Python-Cross-Compiler 3
    
on:
  workflow_dispatch:
    # Inputs the workflow parameters.
    inputs:
      myname:
# input script name without .py here:
        default: BPM2OSC
        description: Script name
        type: string
        required: true

      mytag:
        description: 'Input Tag'
        default: '0.0.0'
        type: string
        required: true

      onefile:
        description: Compile One-File (self-extracting)
        default: false
        type: boolean
        required: true
        

jobs:
  build:
    permissions:
      contents: write
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
#        os: [macos-latest, windows-latest]
#        os: [ubuntu-latest]
#      os: [macos-latest]
    runs-on: ${{matrix.os}}
    
    steps:

      - name: Check-out repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt

#Start of script-specific stuff

      - name: Ubuntu specific
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install libasound-dev portaudio19-dev libportaudio2 libportaudiocpp0
          sudo apt-get install ffmpeg

      - name: MacOS specific
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install portaudio
          brew reinstall libsndfile
         
      - name: Windows specific
        if: matrix.os == 'windows-latest'
        run: |

#End of script-specific stuff
            
      - name: Install Dependencies for All
        run: |
          pip install -r requirements.txt
          
      - name: Nuitka Compiler for ${{runner.os}}
        uses: Nuitka/Nuitka-Action@v1.0
        with:
          nuitka-version: 1.8.5
          onefile: ${{inputs.onefile}}
          script-name: ${{inputs.myname}}.py
          company-name: salopeknet
          file-version: ${{inputs.mytag}}
          output-file: ${{inputs.myname}}


#Finalizing
          
      - name: STANDALONE make executable & compress TAR for macOS or Linux
        if: ${{inputs.onefile == false && (runner.os == 'macOS' || runner.os ==  'Linux')}}
        uses: thedoctor0/zip-release@0.7.6
        with:
          type: "tar"
          path: "${{github.event.inputs.myname}}"
          command: "chmod +x build/${{github.event.inputs.myname}}.dist/${{github.event.inputs.myname}} && mv build/${{github.event.inputs.myname}}.dist ${{github.event.inputs.myname}}"
          filename: "${{github.event.inputs.myname}}-${{runner.os}}-STANDALONE.tar.gz"          

      - name: STANDALONE compress ZIP for Windows
        if: ${{inputs.onefile == false && runner.os == 'Windows'}}
        uses: thedoctor0/zip-release@0.7.6
        with:
          type: "zip"
          command: "mv build/${{github.event.inputs.myname}}.dist ${{github.event.inputs.myname}}"
          path: "${{github.event.inputs.myname}}"
          filename: "${{github.event.inputs.myname}}-${{runner.os}}-STANDALONE.zip"

      - name: ONEFILE make executable & compress TAR for macOS or Linux
        if: ${{inputs.onefile == true && (runner.os == 'macOS' || runner.os ==  'Linux')}}
        uses: thedoctor0/zip-release@0.7.6
        with:
          type: "tar"
          path: "${{github.event.inputs.myname}}"
          command: "chmod +x build/${{github.event.inputs.myname}} && mv build/${{github.event.inputs.myname}} ${{github.event.inputs.myname}}"
          filename: "${{github.event.inputs.myname}}-${{runner.os}}-ONEFILE.tar.gz"          

      - name: ONEFILE compress ZIP for Windows
        if: ${{inputs.onefile == true && runner.os == 'Windows'}}
        uses: thedoctor0/zip-release@0.7.6
        with:
          type: "zip"
          command: "mv build/${{github.event.inputs.myname}}.exe ${{github.event.inputs.myname}}.exe"
          path: "${{github.event.inputs.myname}}.exe"
          filename: "${{github.event.inputs.myname}}-${{runner.os}}-ONEFILE.zip"


      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{runner.os}} Build
          if-no-files-found: warn
          path: ${{github.event.inputs.myname}}-${{runner.os}}*.*

      - name: Create Release ${{github.event.inputs.mytag}} with Builds from Nuitka
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          commit: main
          name: ${{github.event.inputs.myname}} v${{github.event.inputs.mytag}}
          tag: ${{github.event.inputs.mytag}}
          artifacts: ${{github.event.inputs.myname}}-${{runner.os}}*.*
